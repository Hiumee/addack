package controller

import (
	"addack/src/model"
	"fmt"
	"net/http"
	"os"
	"path"
	"strconv"
	"strings"

	"github.com/gin-gonic/gin"
)

func (c *Controller) GetExploits(context *gin.Context) {
	exploits, err := c.DB.GetExploits()
	if err != nil {
		context.HTML(http.StatusInternalServerError, "error", gin.H{})
		return
	}

	context.HTML(http.StatusOK, "exploits", gin.H{"Exploits": exploits})

	return
}

func (c *Controller) CreateExploit(context *gin.Context) {
	var exploit model.Exploit

	form, err := context.MultipartForm()
	if err != nil {
		fmt.Println(err)
		SendError(context, "An error occured parsing the form")
		return
	}

	exploit.Name = context.PostForm("name")
	exploit.Command = context.PostForm("command")
	cleanPath := path.Clean("/" + strings.Trim(context.PostForm("path"), "/"))
	exploit.Path = cleanPath
	exploit.Tag = context.PostForm("tag")
	exploit.Timeout, err = strconv.ParseInt(context.PostForm("timeout"), 10, 64)

	if err != nil {
		SendError(context, "Invalid timeout")
		return
	}

	if exploit.Name == "" || exploit.Command == "" || exploit.Path == "" {
		SendError(context, "All exploit fields must be filled out")
		return
	}

	id, err := c.DB.CreateExploit(exploit)
	if err != nil {
		SendError(context, err.Error())
		return
	}

	if _, err := os.Stat(c.Config.ExploitsPath); os.IsNotExist(err) {
		os.Mkdir(c.Config.ExploitsPath, 0755)
	}

	exploitPath := path.Join(c.Config.ExploitsPath, exploit.Path)

	if _, err := os.Stat(exploitPath); os.IsNotExist(err) {
		os.Mkdir(exploitPath, 0755)
	}

	for _, file := range form.File["files"] {
		filename := path.Base(file.Filename)
		err := context.SaveUploadedFile(file, path.Join(exploitPath, filename))
		if err != nil {
			fmt.Println(err)
			SendError(context, "Could not save file")
			return
		}
	}

	exploit.Id = id

	ex := exploit
	c.ExploitRunner.ExploitAdder <- &ex

	context.HTML(http.StatusOK, "exploit-row-new", gin.H{"Name": exploit.Name, "Id": id, "Notice": "Exploit created", "Tag": exploit.Tag})
	return
}

func (c *Controller) DeleteExploit(context *gin.Context) {
	id, err := strconv.ParseInt(context.Param("id"), 10, 64)

	if err != nil {
		SendError(context, "Invalid ID")
		return
	}

	err = c.DB.DeleteExploit(id)
	if err != nil {
		SendError(context, "Could not delete exploit")
		return
	}

	c.ExploitRunner.ExploitRemover <- &model.Exploit{Id: id}

	context.HTML(http.StatusOK, "notice", gin.H{"Notice": "Exploit deleted"})
	return
}

func (c *Controller) DeleteAllExploits(context *gin.Context) {
	err := c.DB.DeleteAllExploits()
	if err != nil {
		SendError(context, "Could not delete all exploits")
		return
	}

	exploits := make([]*model.Exploit, 0)

	for _, exploit := range c.ExploitRunner.exploits {
		exploits = append(exploits, exploit)
	}

	for _, exploit := range exploits {
		ex := *exploit
		c.ExploitRunner.ExploitRemover <- &ex
	}

	c.GetExploits(context)

	return
}
