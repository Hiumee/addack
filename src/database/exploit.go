package database

import (
	"addack/src/model"
)

// CreateExploit creates a new exploit in the database
func (db *Database) CreateExploitsTable() error {
	_, err := db.DB.Exec("CREATE TABLE IF NOT EXISTS exploits (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, name TEXT, command TEXT, path TEXT, tag TEXT)")
	return err
}

// CreateExploit creates a new exploit in the database
func (db *Database) CreateExploit(exploit model.Exploit) (int64, error) {
	res, err := db.DB.Exec("INSERT INTO exploits (name, command, path, tag) VALUES ($1, $2, $3, $4)", exploit.Name, exploit.Command, exploit.Path, exploit.Tag)

	if err != nil {
		return 0, err
	}

	id, err := res.LastInsertId()

	return id, nil
}

// GetExploit returns a exploit from the database
func (db *Database) GetExploit(id int64) (model.Exploit, error) {
	var exploit model.Exploit
	err := db.DB.QueryRow("SELECT * FROM exploits WHERE id = $1", id).Scan(&exploit.Id, &exploit.Name, &exploit.Command, &exploit.Path, &exploit.Tag)
	return exploit, err
}

// GetExploits returns all exploits from the database
func (db *Database) GetExploits() ([]model.Exploit, error) {
	var exploits []model.Exploit
	rows, err := db.DB.Query("SELECT * FROM exploits")
	if err != nil {
		return exploits, err
	}
	defer rows.Close()
	for rows.Next() {
		var exploit model.Exploit
		err := rows.Scan(&exploit.Id, &exploit.Name, &exploit.Command, &exploit.Path, &exploit.Tag)
		if err != nil {
			return exploits, err
		}
		exploits = append(exploits, exploit)
	}
	return exploits, err
}

// UpdateExploit updates a exploit in the database
func (db *Database) UpdateExploit(exploit model.Exploit) error {
	_, err := db.DB.Exec("UPDATE exploits SET name = $1, command = $2, path = $3, tag = $4 WHERE id = $5", exploit.Name, exploit.Command, exploit.Path, exploit.Tag, exploit.Id)
	return err
}

// DeleteExploit deletes a exploit from the database
func (db *Database) DeleteExploit(id int64) error {
	_, err := db.DB.Exec("DELETE FROM exploits WHERE id = $1", id)
	return err
}

func (db *Database) DeleteAllExploits() error {
	_, err := db.DB.Exec("DELETE FROM exploits")
	return err
}
